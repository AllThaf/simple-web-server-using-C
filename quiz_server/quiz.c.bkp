// server.c
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <sys/types.h>
#include <sys/stat.h>

#define PORT 8000
#define BUFFER_SIZE 1024
#define MAX_CLIENTS 10

const char *questions[] = {
    "What is the capital of France?\nA. Berlin\nB. Madrid\nC. Paris\nD. Rome",
    "Which programming language is known as 'C with Classes'?\nA. Java\nB. C++\nC. Python\nD. Ruby",
    "What is the value of Pi (approximately)?\nA. 2.14\nB. 3.14\nC. 4.14\nD. 5.14"
};

const char answers[] = {'C', 'B', 'B'};

void handle_client(int client_fd) {
    char buffer[BUFFER_SIZE];
    int current_question = 0;
    int score = 0;

    while (current_question < 3) {
        // Send question
        snprintf(buffer, sizeof(buffer), "Question %d:\n%s\nYour answer (A/B/C/D): ",
                 current_question + 1, questions[current_question]);
        send(client_fd, buffer, strlen(buffer), 0);

        // Receive answer
        memset(buffer, 0, sizeof(buffer));
        recv(client_fd, buffer, sizeof(buffer), 0);

        if (toupper(buffer[0]) == answers[current_question]) {
            score++;
        }

        current_question++;
    }

    // Send final score
    snprintf(buffer, sizeof(buffer), "Quiz finished! Your score: %d/3\n", score);
    send(client_fd, buffer, strlen(buffer), 0);

    close(client_fd);
    exit(0);
}

int main() {
    int server_fd, client_fd;
    struct sockaddr_in server_addr, client_addr;
    socklen_t addr_len = sizeof(client_addr);

    // Create socket
    server_fd = socket(AF_INET, SOCK_STREAM, 0);
    if (server_fd < 0) {
        perror("Socket creation failed");
        exit(EXIT_FAILURE);
    }

    // Bind socket
    server_addr.sin_family = AF_INET;
    server_addr.sin_addr.s_addr = INADDR_ANY;
    server_addr.sin_port = htons(PORT);

    if (bind(server_fd, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {
        perror("Bind failed");
        close(server_fd);
        exit(EXIT_FAILURE);
    }

    // Listen for connections
    if (listen(server_fd, MAX_CLIENTS) < 0) {
        perror("Listen failed");
        close(server_fd);
        exit(EXIT_FAILURE);
    }

    printf("Server is listening on port %d\n", PORT);

    while (1) {
        client_fd = accept(server_fd, (struct sockaddr *)&client_addr, &addr_len);
        if (client_fd < 0) {
            perror("Accept failed");
            continue;
        }

        if (fork() == 0) {
            close(server_fd);
            handle_client(client_fd);
        }

        close(client_fd);
    }

    close(server_fd);
    return 0;
}

